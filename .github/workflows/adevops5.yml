name: dep_gates_adevops5

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true
  
env:
  NODE_VERSION: '16.x'
  GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_ORG_KEY: ${{ secrets.SONAR_ORG_KEY }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install.
      run: npm install

    - name: npm build.
      run: npm run clean && npm run build --if-present
    
    - name: npm test.
      run: npm run test --if-present
      
    - name: convert to junit xml
      run: npm run junitxml
    
    - name: ServiceNow DevOps Unit Test Results
      uses: ServiceNow/servicenow-devops-test-report@v3.1.0
      with:
        devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Build'
        xml-report-filename: 'reports/'
  
  runSonarQube:
   name: 'Run SonarQube' 
   runs-on: ubuntu-latest
   needs: build
   steps:
   - uses: actions/checkout@v3
     with:
       # Disabling shallow clone is recommended for improving relevancy of reporting
       fetch-depth: 0
       
   - name: sonarqube-scanner install.
     run: npm install -g sonarqube-scanner
       
   - name: SonarCloud Scan
     run: sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.branch.name=master
     
   - name: Store Scan Tests Results
     shell: bash
     run : echo "Store Scan Tests Results in ServiceNow"
     
   - name: ServiceNow DevOps Sonar Scan Results
     uses: ServiceNow/servicenow-devops-sonar@v3.1.0
     with:
         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
         instance-url: ${{ secrets.SN_INSTANCE_URL }}
         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
         job-name: 'Run SonarQube'
         context-github: ${{ toJSON(github) }}
         sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
         sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}

  registerArtifact:
    name: 'Register Artifact'
    runs-on: ubuntu-latest
    needs: runSonarQube
    steps:
    - name: Register Artifact
      shell: bash
      run : echo "Register Artifact to ServiceNow"
        
    - name: ServiceNow Register Artifact
      uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
      with:
        devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name:  'Register Artifact'
        artifacts: '[{"name": "samples-app.zip","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'

  registerPackage:
    name: 'Register Package'
    runs-on: ubuntu-latest
    needs: registerArtifact
    steps:
    - name: Register Package to ServiceNow
      shell: bash
      run : echo "Register Package to ServiceNow"
      
    - name: ServiceNow Register Package
      uses: ServiceNow/servicenow-devops-register-package@v3.1.0
      with:
        devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Register Package'
        artifacts: '[{"name": "samples-app.zip","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
        package-name: 'samples-package'

  change:
    name: Change Request Attributes
    runs-on: ubuntu-latest
    needs: registerPackage
    steps:     
      - name: ServiceNow DevOps Change Attributes
        uses: ServiceNow/servicenow-devops-change@v4.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Change Request Attributes'
          change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '100'
          timeout: '3600'
          deployment-gate: '{"environment":"prod","jobName":"Deploy"}'
          
  deploy:
    name: 'Deploy'
    needs: change
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Run deployment scripts
        run: echo Completed Deployment. 
        
#  deploy-pages:
#    name: Deploy to GitHub Pages
#    needs: change
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Setup Pages
#        uses: actions/configure-pages@v3
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v2
#        with:
#         # Upload the source folder
#          path: "./src"
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v2
#
#
#

